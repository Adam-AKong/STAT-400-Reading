Chapter 2 Code

```{r}
library(lobstr)
```


```{r}
x <- c(1, 2, 3)
```

```{r}
y <- x
```

```{r}
`_abc` <- 1
`_abc`
#> [1] 1

`if` <- 10
`if`
#> [1] 10
```

2.2.2 Exercises
1. Explain the relationship between a, b, c and d in the following code:
```{r}
a <- 1:10
b <- a
c <- b
d <- 1:10
```

a is creating a range of values from 1 to 10. b is creating a reference to that. c is also creating a reference to that. d is establishing a new range of values.

2. The following code accesses the mean function in multiple ways. Do they all point to the same underlying function object? Verify this with lobstr::obj_addr().
```{r}
mean
base::mean
get("mean")
evalq(mean)
match.fun("mean")
```
Yes, they all point to the same references.

3. By default, base R data import functions, like read.csv(), will automatically convert non-syntactic names to syntactic ones. Why might this be problematic? What option allows you to suppress this behaviour?

Might be an issue when trying to call a column and R will not allow it. Using ` can prevent suprresion of non-syntactic names.

4. What rules does make.names() use to convert non-syntactic names into syntactic ones?

A syntactically valid name consists of letters, numbers and the dot or underline characters and starts with a letter or the dot not followed by a number. Names such as ".2way" are not valid, and neither are the reserved words.

The definition of a letter depends on the current locale, but only ASCII digits are considered to be digits.

The character "X" is prepended if necessary. All invalid characters are translated to ".". A missing value is translated to "NA". Names which match R keywords have a dot appended to them. Duplicated values are altered by make.unique.

5. I slightly simplified the rules that govern syntactic names. Why is .123e1 not a syntactic name? Read ?make.names for the full details.

It's not a valid name because they have issues with the ASCII values?

2.3

```{r}
x <- c(1, 2, 3)
y <- x

y[[3]] <- 4
x
#> [1] 1 2 3
```

```{r}
x <- c(1, 2, 3)
cat(tracemem(x), "\n")
#> <0x7f80c0e0ffc8> 
```

```{r}
y[[3]] <- 5L

untracemem(x)
```

```{r}
f <- function(a) {
  a
}

x <- c(1, 2, 3)
cat(tracemem(x), "\n")
#> <0x7fe1121693a8>

z <- f(x)
# there's no copy here!

untracemem(x)
```

2.3.4
```{r}
d1 <- data.frame(x = c(1, 5, 6), y = c(2, 4, 3))
```

```{r}
d3 <- d1
d3[1, ] <- d3[1, ] * 3
```

2.3.5

```{r}
x <- c("a", "a", "abc", "d")
```

2.4

```{r}
obj_size(letters)
#> 1,712 B
obj_size(ggplot2::diamonds)
#> 3,456,344 B
```

